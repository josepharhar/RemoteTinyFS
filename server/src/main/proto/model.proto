syntax = "proto3";
package tinyfs;

option java_package = "com.tinyfs.model";
option java_outer_classname = "ServiceModel";

import "google/protobuf/any.proto";

message ClientRequest {
  google.protobuf.Any request = 1;
}

// token:    Encrypted, Serialized client credentials
message ClientRegistrationRequest {
  bytes token = 1;
}

// sessionId:     A unique token handed to a client to identify itself
//                on future calls. Empty string on failure.
// responseCode : SUCCESS on success, or error code on failure.
message ClientRegistrationResponse {
  string sessionId = 1;
  enum ResponseCode {
    SUCCESS = 0;
    BAD_TOKEN = 1;
  }
  ResponseCode responseCode = 2;
}

// sessionId:   The unique token given on client registration.
// diskname:    The target disk to write to.
// message:     The entire message to write (no random access yet).
message WriteRequest {
  string sessionId = 1;
  string diskname = 2;
  bytes message = 3;
  int32 offset = 4;
}

// responseCode: SUCCESS on success, or error code on failure.
message WriteResponse {
  enum ResponseCode {
    SUCCESS = 0;
  }
  ResponseCode responseCode = 1;
}

// sessionId:   The unique token given on client registration.
// diskname:    The target disk to write to.
// offset:      The offset in bytes in the disk to read from.
// size:        The size, in number of bytes, to read from the disk.
message ReadRequest {
  string sessionId = 1;
  string diskname = 2;
  int32 offset = 3;
  int32 size = 4;
}

// message:      The message returned as a byte array. Empty on failure.
// responseCode: SUCCESS on success, or error code on failure.
message ReadResponse {
  bytes message = 1;
  enum ResponseCode {
    SUCCESS = 0;
  }
  ResponseCode responseCode = 2;
}

// sessionId: The unique token given on client registration.
// diskname:  The name of the disk to be opened.
// disksize:  The size of the disk to create in bytes. Negative or excessively
//            large sizes yields undefined behavior.
// mode:      The "open" operation to be performed.
//            CREATE: Create a disk if it does not already exist. If a disk
//                    already exists, then it's size may be increased to
//                    match "disksize" if it is less than "disksize."
//            DONT_CREATE: Only open an existing disk, do not create a new one.
//                         "disksize" is ignored.
message OpenDiskRequest {
  string sessionId = 1;
  string diskname = 2;
  int32 disksize = 3;
  enum OpenMode {
    CREATE = 0;
    DONT_CREATE = 1;
  }
  OpenMode mode = 4;
}

// disksize:     The size of the opened disk in bytes.
// responseCode: SUCCESS on success. DISK_NOT_FOUND if a "DONT_CREATE" request
//               was sent with no existing disk.
message OpenDiskResponse {
  int32 disksize = 1;
  enum ResponseCode {
    SUCCESS = 0;
    DISK_NOT_FOUND = 1;
  }
  ResponseCode responseCode = 2;
}
