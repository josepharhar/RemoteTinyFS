package com.avilan.tinyfsservice;

import static junit.framework.Assert.assertEquals;

import org.apache.tomcat.util.buf.HexUtils;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

import com.avilan.tinyfsservice.ClientCredentialsProto.AccessCredentials;
import com.avilan.tinyfsservice.credentials.ClientCredentialsProvider;
import com.avilan.tinyfsservice.credentials.CredentialsObfuscator;

@EnableAutoConfiguration
@SpringBootApplication
public class Application {

    /**
     * Generated from a previous use of CredentialsObfuscator using the same secret key.
     */
    private static final String ACCESS_KEY = "c8bc32235292930d0038c1851cc97111a2b15eb161a21535456d451ff18f502647e63341c5cc209e";
    private static final String CLIENT_KEY = "26d0c1900074699f51242c209388530c30bb087f5c6f7d2960e05d95fa90f1b246677316b56c6259d497cde19ba8ccccfb0198f92cc65405";

    public static void main(String[] args) throws Exception {
        ApplicationContext application = SpringApplication.run(Application.class, args);

        AccessCredentials credentials = AccessCredentials.newBuilder()
            .setName("avilan")
            .setFsName("avilan-arharj")
            .build();

        CredentialsObfuscator obfuscator =
            application.getBean(CredentialsObfuscator.class);
        ClientCredentialsProvider clientCredentialsProvider =
            application.getBean(ClientCredentialsProvider.class);

        byte[] obfuscatedAccessKey = obfuscator.obfuscateAccessCredentials(credentials);

        // Client keys are based on randomly generated UUIDs, meaning that they should be unique per client per instance.
        byte[] obfuscatedClientKey =
            obfuscator.obfuscateClientCredentials(
                clientCredentialsProvider.provideNewClientCredentials());

        // The keys generated by this service are persistent across JVM runs that use the same secret key.
        assertEquals(
            ACCESS_KEY,
            HexUtils.toHexString(obfuscatedAccessKey));

        // The service can decrypt a given key to its credential form correctly.
        assertEquals(
            obfuscator.deobfuscateEncryptedAccessCredentials(
                HexUtils.fromHexString(ACCESS_KEY)),
            credentials);

        System.out.printf(
            "%s -> %s%n",
            obfuscator.deobfuscateEncryptedAccessCredentials(
                HexUtils.fromHexString(ACCESS_KEY)),
            HexUtils.toHexString(obfuscatedAccessKey));
        System.out.printf(
            "%s -> %s%n",
            obfuscator.deobfuscateClientCredentials(
                HexUtils.fromHexString(CLIENT_KEY)),
            HexUtils.toHexString(obfuscatedClientKey));
    }
}
