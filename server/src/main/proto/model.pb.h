// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/src/main/proto/model.proto

#ifndef PROTOBUF_server_2fsrc_2fmain_2fproto_2fmodel_2eproto__INCLUDED
#define PROTOBUF_server_2fsrc_2fmain_2fproto_2fmodel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace tinyfs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();
void protobuf_InitDefaults_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();
void protobuf_AssignDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();
void protobuf_ShutdownFile_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();

class ClientRegistrationRequest;
class ClientRegistrationResponse;
class ClientRequest;
class ReadRequest;
class ReadResponse;
class WriteRequest;

// ===================================================================

class ClientRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinyfs.ClientRequest) */ {
 public:
  ClientRequest();
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequest& default_instance();

  static const ClientRequest* internal_default_instance();

  void Swap(ClientRequest* other);

  // implements Message ----------------------------------------------

  inline ClientRequest* New() const { return New(NULL); }

  ClientRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientRequest* other);
  void UnsafeMergeFrom(const ClientRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Any request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::google::protobuf::Any& request() const;
  ::google::protobuf::Any* mutable_request();
  ::google::protobuf::Any* release_request();
  void set_allocated_request(::google::protobuf::Any* request);

  // @@protoc_insertion_point(class_scope:tinyfs.ClientRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* request_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void  protobuf_AddDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void protobuf_AssignDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClientRequest> ClientRequest_default_instance_;

// -------------------------------------------------------------------

class ClientRegistrationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinyfs.ClientRegistrationRequest) */ {
 public:
  ClientRegistrationRequest();
  virtual ~ClientRegistrationRequest();

  ClientRegistrationRequest(const ClientRegistrationRequest& from);

  inline ClientRegistrationRequest& operator=(const ClientRegistrationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRegistrationRequest& default_instance();

  static const ClientRegistrationRequest* internal_default_instance();

  void Swap(ClientRegistrationRequest* other);

  // implements Message ----------------------------------------------

  inline ClientRegistrationRequest* New() const { return New(NULL); }

  ClientRegistrationRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRegistrationRequest& from);
  void MergeFrom(const ClientRegistrationRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientRegistrationRequest* other);
  void UnsafeMergeFrom(const ClientRegistrationRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // repeated string fs_names = 2;
  int fs_names_size() const;
  void clear_fs_names();
  static const int kFsNamesFieldNumber = 2;
  const ::std::string& fs_names(int index) const;
  ::std::string* mutable_fs_names(int index);
  void set_fs_names(int index, const ::std::string& value);
  void set_fs_names(int index, const char* value);
  void set_fs_names(int index, const char* value, size_t size);
  ::std::string* add_fs_names();
  void add_fs_names(const ::std::string& value);
  void add_fs_names(const char* value);
  void add_fs_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fs_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fs_names();

  // @@protoc_insertion_point(class_scope:tinyfs.ClientRegistrationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fs_names_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void  protobuf_AddDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void protobuf_AssignDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClientRegistrationRequest> ClientRegistrationRequest_default_instance_;

// -------------------------------------------------------------------

class ClientRegistrationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinyfs.ClientRegistrationResponse) */ {
 public:
  ClientRegistrationResponse();
  virtual ~ClientRegistrationResponse();

  ClientRegistrationResponse(const ClientRegistrationResponse& from);

  inline ClientRegistrationResponse& operator=(const ClientRegistrationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRegistrationResponse& default_instance();

  static const ClientRegistrationResponse* internal_default_instance();

  void Swap(ClientRegistrationResponse* other);

  // implements Message ----------------------------------------------

  inline ClientRegistrationResponse* New() const { return New(NULL); }

  ClientRegistrationResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRegistrationResponse& from);
  void MergeFrom(const ClientRegistrationResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientRegistrationResponse* other);
  void UnsafeMergeFrom(const ClientRegistrationResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sessionId = 1;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // @@protoc_insertion_point(class_scope:tinyfs.ClientRegistrationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void  protobuf_AddDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void protobuf_AssignDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClientRegistrationResponse> ClientRegistrationResponse_default_instance_;

// -------------------------------------------------------------------

class WriteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinyfs.WriteRequest) */ {
 public:
  WriteRequest();
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteRequest& default_instance();

  static const WriteRequest* internal_default_instance();

  void Swap(WriteRequest* other);

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const { return New(NULL); }

  WriteRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteRequest* other);
  void UnsafeMergeFrom(const WriteRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sessionId = 1;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // optional string file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // optional bytes message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional int32 offset = 4;
  void clear_offset();
  static const int kOffsetFieldNumber = 4;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tinyfs.WriteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 offset_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void  protobuf_AddDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void protobuf_AssignDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<WriteRequest> WriteRequest_default_instance_;

// -------------------------------------------------------------------

class ReadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinyfs.ReadRequest) */ {
 public:
  ReadRequest();
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRequest& default_instance();

  static const ReadRequest* internal_default_instance();

  void Swap(ReadRequest* other);

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const { return New(NULL); }

  ReadRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadRequest* other);
  void UnsafeMergeFrom(const ReadRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sessionId = 1;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // optional string file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // optional int32 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // optional int32 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tinyfs.ReadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void  protobuf_AddDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void protobuf_AssignDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReadRequest> ReadRequest_default_instance_;

// -------------------------------------------------------------------

class ReadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinyfs.ReadResponse) */ {
 public:
  ReadResponse();
  virtual ~ReadResponse();

  ReadResponse(const ReadResponse& from);

  inline ReadResponse& operator=(const ReadResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadResponse& default_instance();

  static const ReadResponse* internal_default_instance();

  void Swap(ReadResponse* other);

  // implements Message ----------------------------------------------

  inline ReadResponse* New() const { return New(NULL); }

  ReadResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadResponse& from);
  void MergeFrom(const ReadResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadResponse* other);
  void UnsafeMergeFrom(const ReadResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:tinyfs.ReadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void  protobuf_AddDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto_impl();
  friend void protobuf_AssignDesc_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_server_2fsrc_2fmain_2fproto_2fmodel_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReadResponse> ReadResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientRequest

// optional .google.protobuf.Any request = 1;
inline bool ClientRequest::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void ClientRequest::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
inline const ::google::protobuf::Any& ClientRequest::request() const {
  // @@protoc_insertion_point(field_get:tinyfs.ClientRequest.request)
  return request_ != NULL ? *request_
                         : *::google::protobuf::Any::internal_default_instance();
}
inline ::google::protobuf::Any* ClientRequest::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:tinyfs.ClientRequest.request)
  return request_;
}
inline ::google::protobuf::Any* ClientRequest::release_request() {
  // @@protoc_insertion_point(field_release:tinyfs.ClientRequest.request)
  
  ::google::protobuf::Any* temp = request_;
  request_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_request(::google::protobuf::Any* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tinyfs.ClientRequest.request)
}

inline const ClientRequest* ClientRequest::internal_default_instance() {
  return &ClientRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ClientRegistrationRequest

// optional bytes token = 1;
inline void ClientRegistrationRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRegistrationRequest::token() const {
  // @@protoc_insertion_point(field_get:tinyfs.ClientRegistrationRequest.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRegistrationRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyfs.ClientRegistrationRequest.token)
}
inline void ClientRegistrationRequest::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyfs.ClientRegistrationRequest.token)
}
inline void ClientRegistrationRequest::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyfs.ClientRegistrationRequest.token)
}
inline ::std::string* ClientRegistrationRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:tinyfs.ClientRegistrationRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRegistrationRequest::release_token() {
  // @@protoc_insertion_point(field_release:tinyfs.ClientRegistrationRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRegistrationRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:tinyfs.ClientRegistrationRequest.token)
}

// repeated string fs_names = 2;
inline int ClientRegistrationRequest::fs_names_size() const {
  return fs_names_.size();
}
inline void ClientRegistrationRequest::clear_fs_names() {
  fs_names_.Clear();
}
inline const ::std::string& ClientRegistrationRequest::fs_names(int index) const {
  // @@protoc_insertion_point(field_get:tinyfs.ClientRegistrationRequest.fs_names)
  return fs_names_.Get(index);
}
inline ::std::string* ClientRegistrationRequest::mutable_fs_names(int index) {
  // @@protoc_insertion_point(field_mutable:tinyfs.ClientRegistrationRequest.fs_names)
  return fs_names_.Mutable(index);
}
inline void ClientRegistrationRequest::set_fs_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tinyfs.ClientRegistrationRequest.fs_names)
  fs_names_.Mutable(index)->assign(value);
}
inline void ClientRegistrationRequest::set_fs_names(int index, const char* value) {
  fs_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinyfs.ClientRegistrationRequest.fs_names)
}
inline void ClientRegistrationRequest::set_fs_names(int index, const char* value, size_t size) {
  fs_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinyfs.ClientRegistrationRequest.fs_names)
}
inline ::std::string* ClientRegistrationRequest::add_fs_names() {
  // @@protoc_insertion_point(field_add_mutable:tinyfs.ClientRegistrationRequest.fs_names)
  return fs_names_.Add();
}
inline void ClientRegistrationRequest::add_fs_names(const ::std::string& value) {
  fs_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinyfs.ClientRegistrationRequest.fs_names)
}
inline void ClientRegistrationRequest::add_fs_names(const char* value) {
  fs_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinyfs.ClientRegistrationRequest.fs_names)
}
inline void ClientRegistrationRequest::add_fs_names(const char* value, size_t size) {
  fs_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinyfs.ClientRegistrationRequest.fs_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientRegistrationRequest::fs_names() const {
  // @@protoc_insertion_point(field_list:tinyfs.ClientRegistrationRequest.fs_names)
  return fs_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ClientRegistrationRequest::mutable_fs_names() {
  // @@protoc_insertion_point(field_mutable_list:tinyfs.ClientRegistrationRequest.fs_names)
  return &fs_names_;
}

inline const ClientRegistrationRequest* ClientRegistrationRequest::internal_default_instance() {
  return &ClientRegistrationRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ClientRegistrationResponse

// optional string sessionId = 1;
inline void ClientRegistrationResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRegistrationResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:tinyfs.ClientRegistrationResponse.sessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRegistrationResponse::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyfs.ClientRegistrationResponse.sessionId)
}
inline void ClientRegistrationResponse::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyfs.ClientRegistrationResponse.sessionId)
}
inline void ClientRegistrationResponse::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyfs.ClientRegistrationResponse.sessionId)
}
inline ::std::string* ClientRegistrationResponse::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:tinyfs.ClientRegistrationResponse.sessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRegistrationResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:tinyfs.ClientRegistrationResponse.sessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRegistrationResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:tinyfs.ClientRegistrationResponse.sessionId)
}

inline const ClientRegistrationResponse* ClientRegistrationResponse::internal_default_instance() {
  return &ClientRegistrationResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// WriteRequest

// optional string sessionId = 1;
inline void WriteRequest::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:tinyfs.WriteRequest.sessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyfs.WriteRequest.sessionId)
}
inline void WriteRequest::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyfs.WriteRequest.sessionId)
}
inline void WriteRequest::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyfs.WriteRequest.sessionId)
}
inline ::std::string* WriteRequest::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:tinyfs.WriteRequest.sessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:tinyfs.WriteRequest.sessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:tinyfs.WriteRequest.sessionId)
}

// optional string file = 2;
inline void WriteRequest::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteRequest::file() const {
  // @@protoc_insertion_point(field_get:tinyfs.WriteRequest.file)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyfs.WriteRequest.file)
}
inline void WriteRequest::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyfs.WriteRequest.file)
}
inline void WriteRequest::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyfs.WriteRequest.file)
}
inline ::std::string* WriteRequest::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tinyfs.WriteRequest.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteRequest::release_file() {
  // @@protoc_insertion_point(field_release:tinyfs.WriteRequest.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tinyfs.WriteRequest.file)
}

// optional bytes message = 3;
inline void WriteRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteRequest::message() const {
  // @@protoc_insertion_point(field_get:tinyfs.WriteRequest.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyfs.WriteRequest.message)
}
inline void WriteRequest::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyfs.WriteRequest.message)
}
inline void WriteRequest::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyfs.WriteRequest.message)
}
inline ::std::string* WriteRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:tinyfs.WriteRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteRequest::release_message() {
  // @@protoc_insertion_point(field_release:tinyfs.WriteRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:tinyfs.WriteRequest.message)
}

// optional int32 offset = 4;
inline void WriteRequest::clear_offset() {
  offset_ = 0;
}
inline ::google::protobuf::int32 WriteRequest::offset() const {
  // @@protoc_insertion_point(field_get:tinyfs.WriteRequest.offset)
  return offset_;
}
inline void WriteRequest::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:tinyfs.WriteRequest.offset)
}

inline const WriteRequest* WriteRequest::internal_default_instance() {
  return &WriteRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ReadRequest

// optional string sessionId = 1;
inline void ReadRequest::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:tinyfs.ReadRequest.sessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyfs.ReadRequest.sessionId)
}
inline void ReadRequest::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyfs.ReadRequest.sessionId)
}
inline void ReadRequest::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyfs.ReadRequest.sessionId)
}
inline ::std::string* ReadRequest::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:tinyfs.ReadRequest.sessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:tinyfs.ReadRequest.sessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:tinyfs.ReadRequest.sessionId)
}

// optional string file = 2;
inline void ReadRequest::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRequest::file() const {
  // @@protoc_insertion_point(field_get:tinyfs.ReadRequest.file)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyfs.ReadRequest.file)
}
inline void ReadRequest::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyfs.ReadRequest.file)
}
inline void ReadRequest::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyfs.ReadRequest.file)
}
inline ::std::string* ReadRequest::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tinyfs.ReadRequest.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRequest::release_file() {
  // @@protoc_insertion_point(field_release:tinyfs.ReadRequest.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tinyfs.ReadRequest.file)
}

// optional int32 offset = 3;
inline void ReadRequest::clear_offset() {
  offset_ = 0;
}
inline ::google::protobuf::int32 ReadRequest::offset() const {
  // @@protoc_insertion_point(field_get:tinyfs.ReadRequest.offset)
  return offset_;
}
inline void ReadRequest::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:tinyfs.ReadRequest.offset)
}

// optional int32 size = 4;
inline void ReadRequest::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 ReadRequest::size() const {
  // @@protoc_insertion_point(field_get:tinyfs.ReadRequest.size)
  return size_;
}
inline void ReadRequest::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:tinyfs.ReadRequest.size)
}

inline const ReadRequest* ReadRequest::internal_default_instance() {
  return &ReadRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ReadResponse

// optional bytes message = 1;
inline void ReadResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadResponse::message() const {
  // @@protoc_insertion_point(field_get:tinyfs.ReadResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyfs.ReadResponse.message)
}
inline void ReadResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyfs.ReadResponse.message)
}
inline void ReadResponse::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyfs.ReadResponse.message)
}
inline ::std::string* ReadResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:tinyfs.ReadResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadResponse::release_message() {
  // @@protoc_insertion_point(field_release:tinyfs.ReadResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:tinyfs.ReadResponse.message)
}

inline const ReadResponse* ReadResponse::internal_default_instance() {
  return &ReadResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tinyfs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2fsrc_2fmain_2fproto_2fmodel_2eproto__INCLUDED
