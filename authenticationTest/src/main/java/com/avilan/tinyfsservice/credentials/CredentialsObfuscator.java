package com.avilan.tinyfsservice.credentials;

import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;

import com.avilan.tinyfsservice.ClientCredentialsProto.AccessCredentials;
import com.avilan.tinyfsservice.ClientCredentialsProto.ClientCredentials;
import com.google.common.base.Throwables;

public class CredentialsObfuscator {

    private final Cipher encryptCipher;
    private final Cipher decryptCipher;

    public CredentialsObfuscator(final SecretKey credentialsKey) throws Exception {
        this.encryptCipher = Cipher.getInstance("DES");
        this.decryptCipher = Cipher.getInstance("DES");

        encryptCipher.init(Cipher.ENCRYPT_MODE, credentialsKey);
        decryptCipher.init(Cipher.DECRYPT_MODE, credentialsKey);
    }

    /**
     * @param The protobuf credentials to generate an array of bytes.
     * @return An obfuscated array of bytes signed using the service's secret key.
     */
    public byte[] obfuscateAccessCredentials(final AccessCredentials accessCredentials) {
        byte[] cipherText = null;

        try {
            cipherText = signByteArray(toBase64(accessCredentials.toByteArray()));
        } catch (Exception e) {
            Throwables.propagate(e);
        }

        return cipherText;
    }

    /**
     * @param The obfuscated protobuf credentials generated by obfuscateAccessCredentials.
     * @return The AccessCredentials that byte array represents.
     */
    public AccessCredentials deobfuscateEncryptedAccessCredentials(final byte[] obfuscatedCredentials) {

        AccessCredentials accessCredentials = null;

        try {
            accessCredentials =
                AccessCredentials.parseFrom(fromBase64(decodeByteArray(obfuscatedCredentials)));
        } catch (Exception e) {
            Throwables.propagate(e);
        }

        return accessCredentials;
    }

    public byte[] obfuscateClientCredentials(final ClientCredentials clientCredentials) {
        byte[] cipherText = null;

        try {
            cipherText = signByteArray(toBase64(clientCredentials.toByteArray()));
        } catch (Exception e) {
            Throwables.propagate(e);
        }

        return cipherText;
    }

    public ClientCredentials deobfuscateClientCredentials(final byte[] obfuscatedCredentials) {
        ClientCredentials clientCredentials = null;

        try {
            clientCredentials =
                ClientCredentials.parseFrom(fromBase64(decodeByteArray(obfuscatedCredentials)));
        } catch (Exception e) {
            Throwables.propagate(e);
        }

        return clientCredentials;
    } 

    private byte[] toBase64(final byte[] plainText) throws Exception {
        return Base64.getEncoder().encode(plainText);
    }

    private byte[] fromBase64(final byte[] plainText) throws Exception {
        return Base64.getDecoder().decode(plainText);
    }

    private byte[] signByteArray(final byte[] plainText) throws Exception {
        return encryptCipher.doFinal(plainText);
    }

    private byte[] decodeByteArray(final byte[] cipherText) throws Exception {
        return decryptCipher.doFinal(cipherText);
    }
}
